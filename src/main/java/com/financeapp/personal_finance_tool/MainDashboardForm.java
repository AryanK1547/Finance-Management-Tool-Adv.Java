/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.financeapp.personal_finance_tool;


import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import raven.datetime.component.date.DateEvent;
import raven.datetime.component.date.DatePicker;
import raven.datetime.component.date.DateSelectionListener;

/**
 *
 * @author user
 */
public class MainDashboardForm extends javax.swing.JFrame {
     private String loggedusername;
    private int userId;
     private User user;
    private TransactionDAO transactionDAO;
    private JFrame frame;
    public static int loggedInUserId = -1; 

    /**
     * Creates new form MainDashboardForm
     */
    public MainDashboardForm(String loggedusername, int userId) {
       this.loggedusername = loggedusername;
    this.userId = userId; // Assign userId correctly

    this.loggedInUserId = UserSession.getInstance().getUserId();
    transactionDAO = new TransactionDAO(); // Initialize transactionDAO
    initComponents();  // Initialize components before calling populateYearComboBox

    // Now, populate the year combo box after initializing transactionDAO
    String url = "jdbc:mysql://localhost:3306/personal_finance";
    String username = "root";
    String password = "mysql";
    updateUserInfo();
      populateYearComboBox(url,username,password,cbViewYearFilter);
    populateMonthComboBox(url,username,password,cbViewMonth);
    populateDayComboBox(url,username,password,cbViewDay);
      populateYearComboBox(url,username,password,cbUpdateYearFilter);
    populateMonthComboBox(url,username,password,cbUpdateMonth);
    populateDayComboBox(url,username,password,cbUpdateDay);
     populateYearComboBox(url,username,password,cbRemoveYearFilter);
    populateMonthComboBox(url,username,password,cbRemoveMonth);
    populateDayComboBox(url,username,password,cbRemoveDay);
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonPanel = new javax.swing.JPanel();
        btnShowTransactionModule = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        NavigationPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnLogoutSession = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JLabel();
        txtUserID = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        WelcomePanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        TransactionPanel = new javax.swing.JPanel();
        TransactionModulesPanel = new javax.swing.JPanel();
        WelcomePanelTrancationiModule = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        AddTransactionPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtAddAmount = new javax.swing.JTextField();
        btnAddTransaction = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtAddDatePicked = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddDescription = new javax.swing.JTextArea();
        cbAddCategory = new javax.swing.JComboBox<>();
        ViewTransactionPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelViewAllTransactions = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        cbViewYearFilter = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        cbViewMonth = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        cbViewDay = new javax.swing.JComboBox<>();
        cbViewCategoryFilter = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        UpdateTransactionsPanel = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        cbUpdateYearFilter = new javax.swing.JComboBox<>();
        cbUpdateMonth = new javax.swing.JComboBox<>();
        cbUpdateDay = new javax.swing.JComboBox<>();
        cbUpdateCategoryFilter = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelUpdateTransactions = new javax.swing.JTable();
        jLabel32 = new javax.swing.JLabel();
        txtUpdateAmount = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        txtUpdateDate = new javax.swing.JFormattedTextField();
        jLabel34 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtUpdateDescription = new javax.swing.JTextArea();
        jLabel35 = new javax.swing.JLabel();
        cbUpdateCategory = new javax.swing.JComboBox<>();
        btnUpdateTransaction = new javax.swing.JButton();
        RemoveTransactionPanel = new javax.swing.JPanel();
        btnRemoveTransaction = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtRemoveAmount = new javax.swing.JTextField();
        cbRemoveYearFilter = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        cbRemoveMonth = new javax.swing.JComboBox<>();
        txtRemoveDate = new javax.swing.JFormattedTextField();
        cbRemoveDay = new javax.swing.JComboBox<>();
        jLabel38 = new javax.swing.JLabel();
        cbRemoveCategoryFilter = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtRemoveDescription = new javax.swing.JTextArea();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelRemoveTransactions = new javax.swing.JTable();
        cbRemoveCategory = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        TrascationChoicePanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btnAddTransactionModule = new javax.swing.JButton();
        btnViewTransactionModule = new javax.swing.JButton();
        btnUpdateTransactionPanel = new javax.swing.JButton();
        btnRemoveTransactionModule = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ButtonPanel.setBackground(new java.awt.Color(0, 0, 0));

        btnShowTransactionModule.setText("Transaction");
        btnShowTransactionModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTransactionModuleActionPerformed(evt);
            }
        });

        jButton3.setText("Budgeting");

        jButton4.setText("jButton4");

        jButton5.setText("jButton5");

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanel.setLayout(ButtonPanelLayout);
        ButtonPanelLayout.setHorizontalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnShowTransactionModule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ButtonPanelLayout.setVerticalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnShowTransactionModule, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        NavigationPanel.setBackground(new java.awt.Color(0, 0, 0));
        NavigationPanel.setAlignmentY(0.0F);

        btnLogoutSession.setBackground(new java.awt.Color(255, 51, 51));
        btnLogoutSession.setForeground(new java.awt.Color(255, 255, 255));
        btnLogoutSession.setText("Logout");
        btnLogoutSession.setBorder(null);
        btnLogoutSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutSessionActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Finance Management Tool");
        jLabel2.setToolTipText("");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        txtUserName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtUserName.setForeground(new java.awt.Color(0, 255, 51));
        txtUserName.setText("txtlabelUserInfo");

        txtUserID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtUserID.setForeground(new java.awt.Color(0, 255, 0));
        txtUserID.setText("UserID ");

        javax.swing.GroupLayout NavigationPanelLayout = new javax.swing.GroupLayout(NavigationPanel);
        NavigationPanel.setLayout(NavigationPanelLayout);
        NavigationPanelLayout.setHorizontalGroup(
            NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NavigationPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btnLogoutSession, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(270, 270, 270)
                .addComponent(jLabel1)
                .addGap(89, 89, 89)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        NavigationPanelLayout.setVerticalGroup(
            NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NavigationPanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserName)
                    .addComponent(jLabel2)
                    .addComponent(txtUserID)))
            .addGroup(NavigationPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NavigationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLogoutSession, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.setLayout(new java.awt.CardLayout());

        jLabel14.setFont(new java.awt.Font("Viner Hand ITC", 0, 36)); // NOI18N
        jLabel14.setText("Welcome To Finance Management Tool");

        javax.swing.GroupLayout WelcomePanelLayout = new javax.swing.GroupLayout(WelcomePanel);
        WelcomePanel.setLayout(WelcomePanelLayout);
        WelcomePanelLayout.setHorizontalGroup(
            WelcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WelcomePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );
        WelcomePanelLayout.setVerticalGroup(
            WelcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WelcomePanelLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(WelcomePanel, "card3");

        TransactionModulesPanel.setLayout(new java.awt.CardLayout());

        WelcomePanelTrancationiModule.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel13.setText("<html>\n<h1>Welcome to Trasaction Module: </h1>\n<p>Choose What to do from Above Options.</p></html>\n");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout WelcomePanelTrancationiModuleLayout = new javax.swing.GroupLayout(WelcomePanelTrancationiModule);
        WelcomePanelTrancationiModule.setLayout(WelcomePanelTrancationiModuleLayout);
        WelcomePanelTrancationiModuleLayout.setHorizontalGroup(
            WelcomePanelTrancationiModuleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WelcomePanelTrancationiModuleLayout.createSequentialGroup()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 986, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        WelcomePanelTrancationiModuleLayout.setVerticalGroup(
            WelcomePanelTrancationiModuleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WelcomePanelTrancationiModuleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TransactionModulesPanel.add(WelcomePanelTrancationiModule, "card3");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Date Of Transaction: ");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel12.setText("Amount ");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Description");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("Category: ");

        txtAddAmount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnAddTransaction.setText("Add Transaction");
        btnAddTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransactionActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel5.setText("Transaction Manager :");

        jLabel6.setText("Add Transaction Module");

        txtAddDatePicked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddDatePickedActionPerformed(evt);
            }
        });
        DatePicker dp =new DatePicker();
        dp.setEditor(txtAddDatePicked);  // Link JFormattedTextField to DatePicker
        dp.setDateFormat("yyyy-MM-dd");  // Set date format for display
        dp.setUsePanelOption(true);  // Enable options panel on date picker
        dp.setCloseAfterSelected(true);  // Close popup after date selection
        dp.setSelectedDate(LocalDate.now());

        txtAddDescription.setColumns(20);
        txtAddDescription.setRows(5);
        jScrollPane2.setViewportView(txtAddDescription);

        cbAddCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAddCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddTransactionPanelLayout = new javax.swing.GroupLayout(AddTransactionPanel);
        AddTransactionPanel.setLayout(AddTransactionPanelLayout);
        AddTransactionPanelLayout.setHorizontalGroup(
            AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTransactionPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddTransactionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(AddTransactionPanelLayout.createSequentialGroup()
                        .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(AddTransactionPanelLayout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbAddCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtAddDatePicked, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                            .addComponent(txtAddAmount, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(54, 54, 54)
                        .addComponent(btnAddTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(304, 304, 304))))
        );
        AddTransactionPanelLayout.setVerticalGroup(
            AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTransactionPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtAddAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtAddDatePicked, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AddTransactionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(10, 10, 10)
                        .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(50, 50, 50)
                .addGroup(AddTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cbAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        TransactionModulesPanel.add(AddTransactionPanel, "card2");

        jLabel15.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel15.setText("Transaction Manager :");

        jLabel16.setText("View All Transactions Module");

        tabelViewAllTransactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "TransactionID", "Category", "Amount", "Transaction Date", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelViewAllTransactions);

        jLabel3.setText("Sort By Year:");

        cbViewYearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbViewYearFilterActionPerformed(evt);
            }
        });

        jLabel17.setText("Sort By  Month:");

        cbViewMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbViewMonthActionPerformed(evt);
            }
        });

        jLabel18.setText("Sort By Day:");

        cbViewDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbViewDayActionPerformed(evt);
            }
        });

        cbViewCategoryFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbViewCategoryFilterActionPerformed(evt);
            }
        });

        jLabel19.setText("Sort by Category:");

        jButton1.setText("Generate Report");

        javax.swing.GroupLayout ViewTransactionPanelLayout = new javax.swing.GroupLayout(ViewTransactionPanel);
        ViewTransactionPanel.setLayout(ViewTransactionPanelLayout);
        ViewTransactionPanelLayout.setHorizontalGroup(
            ViewTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewTransactionPanelLayout.createSequentialGroup()
                .addGroup(ViewTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewTransactionPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(ViewTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ViewTransactionPanelLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ViewTransactionPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbViewYearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbViewMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cbViewDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbViewCategoryFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(ViewTransactionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(192, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewTransactionPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        ViewTransactionPanelLayout.setVerticalGroup(
            ViewTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewTransactionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ViewTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ViewTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbViewYearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(cbViewMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(cbViewDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbViewCategoryFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(39, 39, 39))
        );

        TransactionModulesPanel.add(ViewTransactionPanel, "card4");

        jLabel20.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel20.setText("Transaction Manager :");

        jLabel21.setText("Update Transactions Module");

        jLabel22.setText("Sort By Year:");

        jLabel23.setText("Sort By  Month:");

        cbUpdateYearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUpdateYearFilterActionPerformed(evt);
            }
        });

        cbUpdateMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUpdateMonthActionPerformed(evt);
            }
        });

        cbUpdateDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUpdateDayActionPerformed(evt);
            }
        });

        cbUpdateCategoryFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUpdateCategoryFilterActionPerformed(evt);
            }
        });

        jLabel24.setText("Sort by Category:");

        jLabel25.setText("Sort By Day:");

        tabelUpdateTransactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "TransactionID", "Category", "Amount", "Transaction Date", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelUpdateTransactions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelUpdateTransactionsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tabelUpdateTransactions);

        jLabel32.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel32.setText("Amount ");

        txtUpdateAmount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel33.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel33.setText("Date Of Transaction: ");

        txtUpdateDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateDateActionPerformed(evt);
            }
        });
        DatePicker updateDatePicker= new DatePicker();
        updateDatePicker.setEditor(txtUpdateDate);  // Link JFormattedTextField to DatePicker
        updateDatePicker.setDateFormat("yyyy-MM-dd");  // Set date format for display
        updateDatePicker.setUsePanelOption(true);  // Enable options panel on date picker
        updateDatePicker.setCloseAfterSelected(true);  // Close popup after date selection
        updateDatePicker.setSelectedDate(LocalDate.now());

        jLabel34.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel34.setText("Description");

        txtUpdateDescription.setColumns(20);
        txtUpdateDescription.setRows(5);
        jScrollPane5.setViewportView(txtUpdateDescription);

        jLabel35.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel35.setText("Category: ");

        cbUpdateCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbUpdateCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUpdateCategoryActionPerformed(evt);
            }
        });

        btnUpdateTransaction.setBackground(new java.awt.Color(0, 102, 51));
        btnUpdateTransaction.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateTransaction.setText("Update");
        btnUpdateTransaction.setBorder(null);
        btnUpdateTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTransactionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UpdateTransactionsPanelLayout = new javax.swing.GroupLayout(UpdateTransactionsPanel);
        UpdateTransactionsPanel.setLayout(UpdateTransactionsPanelLayout);
        UpdateTransactionsPanelLayout.setHorizontalGroup(
            UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbUpdateYearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbUpdateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbUpdateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbUpdateCategoryFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateTransactionsPanelLayout.createSequentialGroup()
                .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1008, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                                .addComponent(txtUpdateAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUpdateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cbUpdateCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(369, 369, 369)
                                .addComponent(btnUpdateTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(27, 27, 27))
        );
        UpdateTransactionsPanelLayout.setVerticalGroup(
            UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGap(33, 33, 33)
                .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(cbUpdateYearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(cbUpdateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(cbUpdateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbUpdateCategoryFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtUpdateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbUpdateCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel32)
                        .addComponent(txtUpdateAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel33)))
                .addGroup(UpdateTransactionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel34))
                    .addGroup(UpdateTransactionsPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateTransactionsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47))
        );

        TransactionModulesPanel.add(UpdateTransactionsPanel, "card5");

        btnRemoveTransaction.setBackground(new java.awt.Color(255, 51, 51));
        btnRemoveTransaction.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRemoveTransaction.setForeground(new java.awt.Color(255, 255, 255));
        btnRemoveTransaction.setText("Remove");
        btnRemoveTransaction.setBorder(null);
        btnRemoveTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTransactionActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel36.setText("Amount ");

        jLabel26.setText("Sort By  Month:");

        txtRemoveAmount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        cbRemoveYearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRemoveYearFilterActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel37.setText("Date Of Transaction: ");

        cbRemoveMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRemoveMonthActionPerformed(evt);
            }
        });

        txtRemoveDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRemoveDateActionPerformed(evt);
            }
        });
        dp.setEditor(txtUpdateDate);  // Link JFormattedTextField to DatePicker
        dp.setDateFormat("yyyy-MM-dd");  // Set date format for display
        dp.setUsePanelOption(true);  // Enable options panel on date picker
        dp.setCloseAfterSelected(true);  // Close popup after date selection
        dp.setSelectedDate(LocalDate.now());

        cbRemoveDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRemoveDayActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel38.setText("Description");

        cbRemoveCategoryFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRemoveCategoryFilterActionPerformed(evt);
            }
        });

        txtRemoveDescription.setColumns(20);
        txtRemoveDescription.setRows(5);
        jScrollPane6.setViewportView(txtRemoveDescription);

        jLabel27.setText("Sort by Category:");

        jLabel28.setText("Sort By Day:");

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel39.setText("Category: ");

        tabelRemoveTransactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "TransactionID", "Category", "Amount", "Transaction Date", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelRemoveTransactions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelRemoveTransactionsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tabelRemoveTransactions);

        cbRemoveCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRemoveCategoryActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel29.setText("Transaction Manager :");

        jLabel30.setText("Remove Transactions Module");

        jLabel31.setText("Sort By Year:");

        javax.swing.GroupLayout RemoveTransactionPanelLayout = new javax.swing.GroupLayout(RemoveTransactionPanel);
        RemoveTransactionPanel.setLayout(RemoveTransactionPanelLayout);
        RemoveTransactionPanelLayout.setHorizontalGroup(
            RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbRemoveYearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbRemoveMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbRemoveDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbRemoveCategoryFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RemoveTransactionPanelLayout.createSequentialGroup()
                .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1008, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                                .addComponent(txtRemoveAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRemoveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cbRemoveCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(369, 369, 369)
                                .addComponent(btnRemoveTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(27, 27, 27))
        );
        RemoveTransactionPanelLayout.setVerticalGroup(
            RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addGap(33, 33, 33)
                .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(cbRemoveYearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(cbRemoveMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(cbRemoveDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbRemoveCategoryFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtRemoveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbRemoveCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel36)
                        .addComponent(txtRemoveAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel37)))
                .addGroup(RemoveTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel38))
                    .addGroup(RemoveTransactionPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RemoveTransactionPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47))
        );

        DatePicker removeDatePicker= new DatePicker();
        removeDatePicker.setEditor(txtUpdateDate);  // Link JFormattedTextField to DatePicker
        removeDatePicker.setDateFormat("yyyy-MM-dd");  // Set date format for display
        removeDatePicker.setUsePanelOption(true);  // Enable options panel on date picker
        removeDatePicker.setCloseAfterSelected(true);  // Close popup after date selection
        removeDatePicker.setSelectedDate(LocalDate.now());

        TransactionModulesPanel.add(RemoveTransactionPanel, "card6");

        jLabel4.setText("Choose Operations: ");

        btnAddTransactionModule.setText("Add Transaction");
        btnAddTransactionModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransactionModuleActionPerformed(evt);
            }
        });

        btnViewTransactionModule.setText("View Transaction");
        btnViewTransactionModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTransactionModuleActionPerformed(evt);
            }
        });

        btnUpdateTransactionPanel.setText("Update Trasaction");
        btnUpdateTransactionPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTransactionPanelActionPerformed(evt);
            }
        });

        btnRemoveTransactionModule.setText("Remove Trascation ");
        btnRemoveTransactionModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTransactionModuleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TrascationChoicePanelLayout = new javax.swing.GroupLayout(TrascationChoicePanel);
        TrascationChoicePanel.setLayout(TrascationChoicePanelLayout);
        TrascationChoicePanelLayout.setHorizontalGroup(
            TrascationChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TrascationChoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(btnAddTransactionModule)
                .addGap(136, 136, 136)
                .addComponent(btnViewTransactionModule, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(btnUpdateTransactionPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRemoveTransactionModule)
                .addContainerGap())
        );
        TrascationChoicePanelLayout.setVerticalGroup(
            TrascationChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TrascationChoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TrascationChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnAddTransactionModule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdateTransactionPanel)
                    .addComponent(btnViewTransactionModule)
                    .addComponent(btnRemoveTransactionModule)))
        );

        javax.swing.GroupLayout TransactionPanelLayout = new javax.swing.GroupLayout(TransactionPanel);
        TransactionPanel.setLayout(TransactionPanelLayout);
        TransactionPanelLayout.setHorizontalGroup(
            TransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionPanelLayout.createSequentialGroup()
                .addComponent(TrascationChoicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(140, 140, 140))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TransactionPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(TransactionModulesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        TransactionPanelLayout.setVerticalGroup(
            TransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(TrascationChoicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TransactionModulesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(TransactionPanel, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NavigationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(NavigationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateUserInfo() {
        // Assuming you have JLabels or other UI components to display user info
    txtUserName.setText("Username: " + loggedusername);
        txtUserID.setText("UserId: " + userId); 
    }
    private void btnAddTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransactionActionPerformed
         try {
                double amount = Double.parseDouble(txtAddAmount.getText());
                String description = txtAddDescription.getText();
                String category = cbAddCategory.getSelectedItem().toString();
                java.sql.Date transactionDate = java.sql.Date.valueOf(txtAddDatePicked.getText());

                Transaction transaction = new Transaction(0, amount, description, category, transactionDate,loggedInUserId);
                transactionDAO.addTransaction(transaction);
                JOptionPane.showMessageDialog(this, "Transaction added!");
                
            } catch (SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }       // TODO add your handling code here:
    }//GEN-LAST:event_btnAddTransactionActionPerformed

    private void btnShowTransactionModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTransactionModuleActionPerformed
                // TODO add your handling code here:
                mainPanel.removeAll(); // Remove all components from mainPanel
                mainPanel.add(TransactionPanel); // Add the TransactionPanel to mainPanel
                mainPanel.revalidate(); // Revalidate the mainPanel to refresh the layout
                mainPanel.repaint(); 
    }//GEN-LAST:event_btnShowTransactionModuleActionPerformed

    private void btnAddTransactionModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransactionModuleActionPerformed
                // TODO add your handling code here:
                populateCategoryComboBox(cbAddCategory);
                TransactionModulesPanel.removeAll();
                TransactionModulesPanel.add(AddTransactionPanel); // Add the TransactionPanel to mainPanel
                TransactionModulesPanel.revalidate(); // Revalidate the mainPanel to refresh the layout
                TransactionModulesPanel.repaint();
    }//GEN-LAST:event_btnAddTransactionModuleActionPerformed

    private void btnViewTransactionModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTransactionModuleActionPerformed
                    // TODO add your handling code here:
                     populateCategoryComboBox(cbViewCategoryFilter);  
                    loadTransactionsToTable(tabelViewAllTransactions);

                    
                TransactionModulesPanel.removeAll();
                TransactionModulesPanel.add(ViewTransactionPanel); // Add the TransactionPanel to mainPanel
                TransactionModulesPanel.revalidate(); // Revalidate the mainPanel to refresh the layout
                TransactionModulesPanel.repaint();
    }//GEN-LAST:event_btnViewTransactionModuleActionPerformed

    private void btnLogoutSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutSessionActionPerformed
            // TODO add your handling code here:
             this.dispose();

    // Show the LoginForm again
    LoginForm loginForm = new LoginForm((userId, username) -> {
    UserSession.getInstance().setUserId(userId);
    MainDashboardForm mainDB = new MainDashboardForm(username, userId);
    mainDB.setVisible(true);
});
       loginForm.setVisible(true);
    }//GEN-LAST:event_btnLogoutSessionActionPerformed

    private void txtAddDatePickedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddDatePickedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddDatePickedActionPerformed

    private void cbAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAddCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbAddCategoryActionPerformed

    private void cbViewYearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbViewYearFilterActionPerformed
        // TODO add your handling code here:
        filterTransactions(tabelViewAllTransactions,cbViewYearFilter,cbViewMonth,cbViewDay,cbViewCategoryFilter);
    }//GEN-LAST:event_cbViewYearFilterActionPerformed

    private void cbViewMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbViewMonthActionPerformed
        filterTransactions(tabelViewAllTransactions,cbViewYearFilter,cbViewMonth,cbViewDay,cbViewCategoryFilter);        // TODO add your handling code here:
    }//GEN-LAST:event_cbViewMonthActionPerformed

    private void cbViewDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbViewDayActionPerformed
        // TODO add your handling code here:
        filterTransactions(tabelViewAllTransactions,cbViewYearFilter,cbViewMonth,cbViewDay,cbViewCategoryFilter);
    }//GEN-LAST:event_cbViewDayActionPerformed

    private void cbViewCategoryFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbViewCategoryFilterActionPerformed
        filterTransactions(tabelViewAllTransactions,cbViewYearFilter,cbViewMonth,cbViewDay,cbViewCategoryFilter);   // TODO add your handling code here:
    }//GEN-LAST:event_cbViewCategoryFilterActionPerformed

    private void cbUpdateYearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUpdateYearFilterActionPerformed
        // TODO add your handling code here:
        filterTransactions(tabelUpdateTransactions,cbUpdateYearFilter,cbUpdateMonth,cbUpdateDay,cbUpdateCategoryFilter); 
    }//GEN-LAST:event_cbUpdateYearFilterActionPerformed

    private void cbUpdateMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUpdateMonthActionPerformed
        // TODO add your handling code here:
        filterTransactions(tabelUpdateTransactions,cbUpdateYearFilter,cbUpdateMonth,cbUpdateDay,cbUpdateCategoryFilter); 
    }//GEN-LAST:event_cbUpdateMonthActionPerformed

    private void cbUpdateDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUpdateDayActionPerformed
        // TODO add your handling code here:
        filterTransactions(tabelUpdateTransactions,cbUpdateYearFilter,cbUpdateMonth,cbUpdateDay,cbUpdateCategoryFilter); 
    }//GEN-LAST:event_cbUpdateDayActionPerformed

    private void cbUpdateCategoryFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUpdateCategoryFilterActionPerformed
        // TODO add your handling code here:
        filterTransactions(tabelUpdateTransactions,cbUpdateYearFilter,cbUpdateMonth,cbUpdateDay,cbUpdateCategoryFilter); 
    }//GEN-LAST:event_cbUpdateCategoryFilterActionPerformed

    private void txtUpdateDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUpdateDateActionPerformed

    private void cbUpdateCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUpdateCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbUpdateCategoryActionPerformed

    private void btnUpdateTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTransactionActionPerformed
           
      
    // Retrieve the stored transaction ID
    int transactionId = (int) btnUpdateTransaction.getClientProperty("transactionId");
    if (transactionId == 0) {
        JOptionPane.showMessageDialog(null, "Please select a transaction to update.");
        return;
    }

    // Get updated values from fields
    String newDate = txtUpdateDate.getText();
    String newCategory = cbUpdateCategory.getSelectedItem().toString();
    double newAmount = Double.parseDouble(txtUpdateAmount.getText());
    String newDescription = txtUpdateDescription.getText();

    // Update query
    String query = "UPDATE transactions SET transaction_date = ?, category = ?, amount = ?, description = ? WHERE id = ?";
    String url = "jdbc:mysql://localhost:3306/personal_finance";
    String username = "root";
    String password = "mysql";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement pstmt = conn.prepareStatement(query)) {
        pstmt.setString(1, newDate);
        pstmt.setString(2, newCategory);
        pstmt.setDouble(3, newAmount);
        pstmt.setString(4, newDescription);
        pstmt.setInt(5, transactionId);

        int rowsUpdated = pstmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(null, "Transaction updated successfully!");
            loadTransactionsToTable(tabelUpdateTransactions); // Refresh table
        } else {
            JOptionPane.showMessageDialog(null, "Error updating transaction.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
    }



    }//GEN-LAST:event_btnUpdateTransactionActionPerformed

    private void tabelUpdateTransactionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelUpdateTransactionsMouseClicked
        // TODO add your handling code here:
 int selectedRow = tabelUpdateTransactions.getSelectedRow();
if (selectedRow != -1) {
    int result = JOptionPane.showConfirmDialog(null, 
        "Are you sure you want to update this transaction?", 
        "Confirm Update", JOptionPane.YES_NO_OPTION);

    if (result == JOptionPane.YES_OPTION) {
        try {
            // Retrieve data from the selected row
            Object idObject = tabelUpdateTransactions.getValueAt(selectedRow, 0);
            Object categoryObject = tabelUpdateTransactions.getValueAt(selectedRow, 1);
            Object amountObject = tabelUpdateTransactions.getValueAt(selectedRow, 3);
            Object dateObject = tabelUpdateTransactions.getValueAt(selectedRow, 4);
            Object descriptionObject = tabelUpdateTransactions.getValueAt(selectedRow, 2);

            // Convert data to the correct types
            int transactionId = (idObject != null) ? Integer.parseInt(idObject.toString()) : 0;
            String category = (categoryObject != null) ? categoryObject.toString() : "";
            double amount = (amountObject != null) ? Double.parseDouble(amountObject.toString()) : 0.0;
            String date = (dateObject != null) ? dateObject.toString() : "";
            String description = (descriptionObject != null) ? descriptionObject.toString() : "";

            // Populate text fields
            txtUpdateDate.setText(date);
            txtUpdateAmount.setText(String.valueOf(amount));
            txtUpdateDescription.setText(description);

            // Find and set the category in the combo box
            int categoryIndex = -1;
            for (int i = 0; i < cbUpdateCategory.getItemCount(); i++) {
                if (cbUpdateCategory.getItemAt(i).equals(category)) {
                    categoryIndex = i;
                    break;
                }
            }
            if (categoryIndex != -1) {
                cbUpdateCategory.setSelectedIndex(categoryIndex);
            } else {
                JOptionPane.showMessageDialog(null, "Category not found in combo box.");
            }

            // Store transaction ID for update reference
            btnUpdateTransaction.putClientProperty("transactionId", transactionId);
                     
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error parsing data: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage());
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "No row selected.");
}



    }//GEN-LAST:event_tabelUpdateTransactionsMouseClicked

    private void btnUpdateTransactionPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTransactionPanelActionPerformed
        // TODO add your handling code here:
        populateCategoryComboBox(cbUpdateCategoryFilter);  
        loadTransactionsToTable(tabelUpdateTransactions); 
        populateCategoryComboBox(cbUpdateCategory);
        
        
          TransactionModulesPanel.removeAll();
                TransactionModulesPanel.add(UpdateTransactionsPanel); // Add the TransactionPanel to mainPanel
                TransactionModulesPanel.revalidate(); // Revalidate the mainPanel to refresh the layout
                TransactionModulesPanel.repaint();
    }//GEN-LAST:event_btnUpdateTransactionPanelActionPerformed

    private void btnRemoveTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTransactionActionPerformed
   
   int transactionId = (int) btnRemoveTransaction.getClientProperty("transactionId");
    if (transactionId == 0) {
        JOptionPane.showMessageDialog(null, "Please select a transaction to delete.");
        return;
    }

    // Confirmation dialog
    int result = JOptionPane.showConfirmDialog(null, 
        "Are you sure you want to delete this transaction?", 
        "Confirm Delete", JOptionPane.YES_NO_OPTION);
    if (result != JOptionPane.YES_OPTION) {
        return; // If the user selects "No", exit the method
    }

    // Delete query
    String query = "DELETE FROM transactions WHERE id = ?";
    String url = "jdbc:mysql://localhost:3306/personal_finance";
    String username = "root";
    String password = "mysql";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement pstmt = conn.prepareStatement(query)) {
        
        // Set the transaction ID parameter for deletion
        pstmt.setInt(1, transactionId);

        // Execute delete operation
        int rowsDeleted = pstmt.executeUpdate();
        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(null, "Transaction deleted successfully!");
            loadTransactionsToTable(tabelRemoveTransactions); // Refresh table to reflect deletion
            clearFieldsAfterDeletion(); // Clear fields after deletion
        } else {
            JOptionPane.showMessageDialog(null, "Error deleting transaction.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
    }


    }//GEN-LAST:event_btnRemoveTransactionActionPerformed

    private void cbRemoveYearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRemoveYearFilterActionPerformed
        // TODO add your handling code here:
        filterTransactions(tabelRemoveTransactions,cbRemoveYearFilter,cbRemoveMonth,cbRemoveDay,cbRemoveCategoryFilter); 
    }//GEN-LAST:event_cbRemoveYearFilterActionPerformed

    private void cbRemoveMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRemoveMonthActionPerformed
filterTransactions(tabelRemoveTransactions,cbRemoveYearFilter,cbRemoveMonth,cbRemoveDay,cbRemoveCategoryFilter);         // TODO add your handling code here:
    }//GEN-LAST:event_cbRemoveMonthActionPerformed

    private void txtRemoveDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRemoveDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRemoveDateActionPerformed

    private void cbRemoveDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRemoveDayActionPerformed
filterTransactions(tabelRemoveTransactions,cbRemoveYearFilter,cbRemoveMonth,cbRemoveDay,cbRemoveCategoryFilter);         // TODO add your handling code here:
    }//GEN-LAST:event_cbRemoveDayActionPerformed

    private void cbRemoveCategoryFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRemoveCategoryFilterActionPerformed
filterTransactions(tabelRemoveTransactions,cbRemoveYearFilter,cbRemoveMonth,cbRemoveDay,cbRemoveCategoryFilter);         // TODO add your handling code here:
    }//GEN-LAST:event_cbRemoveCategoryFilterActionPerformed

    private void tabelRemoveTransactionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelRemoveTransactionsMouseClicked
                                                    
        // TODO add your handling code here:
 int selectedRow = tabelRemoveTransactions.getSelectedRow();
if (selectedRow != -1) {
    int result = JOptionPane.showConfirmDialog(null, 
        "Are you sure you want to Remove this transaction?", 
        "Confirm Update", JOptionPane.YES_NO_OPTION);

    if (result == JOptionPane.YES_OPTION) {
        try {
            // Retrieve data from the selected row
            Object idObject = tabelRemoveTransactions.getValueAt(selectedRow, 0);
            Object categoryObject = tabelRemoveTransactions.getValueAt(selectedRow, 1);
            Object amountObject = tabelRemoveTransactions.getValueAt(selectedRow, 3);
            Object dateObject = tabelRemoveTransactions.getValueAt(selectedRow, 4);
            Object descriptionObject = tabelRemoveTransactions.getValueAt(selectedRow, 2);

            // Convert data to the correct types
            int transactionId = (idObject != null) ? Integer.parseInt(idObject.toString()) : 0;
            String category = (categoryObject != null) ? categoryObject.toString() : "";
            double amount = (amountObject != null) ? Double.parseDouble(amountObject.toString()) : 0.0;
            String date = (dateObject != null) ? dateObject.toString() : "";
            String description = (descriptionObject != null) ? descriptionObject.toString() : "";

            // Populate text fields
            txtRemoveDate.setText(date);
            txtRemoveAmount.setText(String.valueOf(amount));
            txtRemoveDescription.setText(description);

            // Find and set the category in the combo box
            int categoryIndex = -1;
            for (int i = 0; i < cbRemoveCategory.getItemCount(); i++) {
                if (cbRemoveCategory.getItemAt(i).equals(category)) {
                    categoryIndex = i;
                    break;
                }
            }
            if (categoryIndex != -1) {
                cbRemoveCategory.setSelectedIndex(categoryIndex);
            } else {
                JOptionPane.showMessageDialog(null, "Category not found in combo box.");
            }

            // Store transaction ID for update reference
            btnRemoveTransaction.putClientProperty("transactionId", transactionId);
                     
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error parsing data: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage());
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "No row selected.");
}

        
            // TODO add your handling code here:
    }//GEN-LAST:event_tabelRemoveTransactionsMouseClicked

    private void cbRemoveCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRemoveCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRemoveCategoryActionPerformed

    private void btnRemoveTransactionModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTransactionModuleActionPerformed
        // TODO add your handling code here:
         populateCategoryComboBox(cbRemoveCategoryFilter);  
        loadTransactionsToTable(tabelRemoveTransactions); 
        populateCategoryComboBox(cbRemoveCategory);
        
        
          TransactionModulesPanel.removeAll();
                TransactionModulesPanel.add(RemoveTransactionPanel); // Add the TransactionPanel to mainPanel
                TransactionModulesPanel.revalidate(); // Revalidate the mainPanel to refresh the layout
                TransactionModulesPanel.repaint();
    }//GEN-LAST:event_btnRemoveTransactionModuleActionPerformed

    /**
     * @param args the command line arguments
     */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    FlatMacDarkLaf.setup();

    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //</editor-fold>

    /* Retrieve username and userId from UserSession */
    UserSession userSession = UserSession.getInstance();
    String username = userSession.getUsername();
    int userId = userSession.getUserId();

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new MainDashboardForm(username, userId).setVisible(true);
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddTransactionPanel;
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JPanel NavigationPanel;
    private javax.swing.JPanel RemoveTransactionPanel;
    private javax.swing.JPanel TransactionModulesPanel;
    private javax.swing.JPanel TransactionPanel;
    private javax.swing.JPanel TrascationChoicePanel;
    private javax.swing.JPanel UpdateTransactionsPanel;
    private javax.swing.JPanel ViewTransactionPanel;
    private javax.swing.JPanel WelcomePanel;
    private javax.swing.JPanel WelcomePanelTrancationiModule;
    private javax.swing.JButton btnAddTransaction;
    private javax.swing.JButton btnAddTransactionModule;
    private javax.swing.JButton btnLogoutSession;
    private javax.swing.JButton btnRemoveTransaction;
    private javax.swing.JButton btnRemoveTransactionModule;
    private javax.swing.JButton btnShowTransactionModule;
    private javax.swing.JButton btnUpdateTransaction;
    private javax.swing.JButton btnUpdateTransactionPanel;
    private javax.swing.JButton btnViewTransactionModule;
    private javax.swing.JComboBox<String> cbAddCategory;
    private javax.swing.JComboBox<String> cbRemoveCategory;
    private javax.swing.JComboBox<String> cbRemoveCategoryFilter;
    private javax.swing.JComboBox<String> cbRemoveDay;
    private javax.swing.JComboBox<String> cbRemoveMonth;
    private javax.swing.JComboBox<String> cbRemoveYearFilter;
    private javax.swing.JComboBox<String> cbUpdateCategory;
    private javax.swing.JComboBox<String> cbUpdateCategoryFilter;
    private javax.swing.JComboBox<String> cbUpdateDay;
    private javax.swing.JComboBox<String> cbUpdateMonth;
    private javax.swing.JComboBox<String> cbUpdateYearFilter;
    private javax.swing.JComboBox<String> cbViewCategoryFilter;
    private javax.swing.JComboBox<String> cbViewDay;
    private javax.swing.JComboBox<String> cbViewMonth;
    private javax.swing.JComboBox<String> cbViewYearFilter;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable tabelRemoveTransactions;
    private javax.swing.JTable tabelUpdateTransactions;
    private javax.swing.JTable tabelViewAllTransactions;
    private javax.swing.JTextField txtAddAmount;
    private javax.swing.JFormattedTextField txtAddDatePicked;
    private javax.swing.JTextArea txtAddDescription;
    private javax.swing.JTextField txtRemoveAmount;
    private javax.swing.JFormattedTextField txtRemoveDate;
    private javax.swing.JTextArea txtRemoveDescription;
    private javax.swing.JTextField txtUpdateAmount;
    private javax.swing.JFormattedTextField txtUpdateDate;
    private javax.swing.JTextArea txtUpdateDescription;
    private javax.swing.JLabel txtUserID;
    private javax.swing.JLabel txtUserName;
    // End of variables declaration//GEN-END:variables

//    private void sortTransactionsByDate(LocalDate selectedDate) {
//    try {
//        // Assuming TransactionDAO has been initialized
//        TransactionDAO transactionDAO = new TransactionDAO();
//        
//        // Fetch sorted transactions based on the selected date
//        List<Transaction> transactions = transactionDAO.getAllTransactions(UserSession.getInstance().getUserId(), "transaction_date", "ASC", selectedDate);
//
//        // Update the table with the sorted transactions
//        DefaultTableModel model = (DefaultTableModel) transactionTable.getModel();
//        model.setRowCount(0);  // Clear existing rows
//
//        // Add the transactions to the table
//        for (Transaction transaction : transactions) {
//            model.addRow(new Object[]{
//                transaction.getId(),
//                transaction.getUserId(),
//                transaction.getType(),
//                transaction.getCategory(),
//                transaction.getAmount(),
//                transaction.getTransactionDate(),
//                transaction.getDescription(),
//                transaction.getPaymentMethod(),
//                transaction.isRecurring()
//            });
//        }
//    } catch (SQLException e) {
//        e.printStackTrace();
//        JOptionPane.showMessageDialog(this, "Error fetching transactions: " + e.getMessage());
//    }
//}
    private void loadTransactionsToTable(JTable table) {
    String[] columnNames = {"Transaction ID","Category", "Description", "Amount", "Date"};

    // Create a table model with the column names and no initial rows
    DefaultTableModel model = new DefaultTableModel(columnNames, 0);

    try {
        // Retrieve transactions for the logged-in user
        List<Transaction> transactions = transactionDAO.getAllTransactions(loggedInUserId);

        // Populate the model with each transaction's details
        for (Transaction t : transactions) {
            Object[] rowData = {
                t.getId(),
                t.getCategory(),
                t.getDescription(),
                t.getAmount(),
                t.getTransactionDate()
            };
            model.addRow(rowData);
        }

        // Set the model to the JTable
        table.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(frame, "Error retrieving transactions: " + e.getMessage());
    }
    
    }

    private void filterTransactions(JTable table,JComboBox cbyear,JComboBox cbmonth,JComboBox cbday,JComboBox cbcategory) {
    // Clear existing data from the table
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0); // Remove all rows

    // Get selected values from combo boxes and handle null values
    String selectedYear = (cbyear.getSelectedItem() != null) ? cbyear.getSelectedItem().toString() : "All";
    String selectedMonth = (cbmonth.getSelectedItem() != null) ? cbmonth.getSelectedItem().toString() : "All";
    String selectedDay = (cbday.getSelectedItem() != null) ? cbday.getSelectedItem().toString() : "All";
    String selectedCategory = (cbcategory.getSelectedItem() != null) ? cbcategory.getSelectedItem().toString() : "All";

    // Start building the SQL query for transactions
    StringBuilder query = new StringBuilder("SELECT id, transaction_date, category, amount, description FROM transactions WHERE 1=1");

    // Add conditions based on combo box selections
    if (!selectedYear.equals("All")) {
        query.append(" AND YEAR(transaction_date) = '").append(selectedYear).append("'");
    }
    if (!selectedMonth.equals("All")) {
        query.append(" AND MONTH(transaction_date) = '").append(selectedMonth).append("'");
    }
    if (!selectedDay.equals("All")) {
        query.append(" AND DAY(transaction_date) = '").append(selectedDay).append("'");
    }
    if (!selectedCategory.equals("All")) {
        query.append(" AND category = '").append(selectedCategory).append("'");
    }

    // Database connection details
    String url = "jdbc:mysql://localhost:3306/personal_finance";
    String username = "root";
    String password = "mysql";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query.toString())) {

        // Iterate through the result set and add rows to the table model
        while (rs.next()) {
             String transactionId = rs.getString("id");
            String category = rs.getString("category");
             double amount = rs.getDouble("amount");
            String date = rs.getString("transaction_date");
             String description = rs.getString("description");
           
           

            // Add the row to the table model
            model.addRow(new Object[]{transactionId, category, description,amount, date});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage());
    }
}

    private int[] getDistinctYears() {
    try {
        // Fetch distinct years from the database using the transactionDAO
        List<Integer> distinctYearsList = transactionDAO.getDistinctYears(UserSession.getInstance().getUserId());
        
        // Convert List<Integer> to int[] for use in the combo box
        int[] distinctYears = new int[distinctYearsList.size()];
        for (int i = 0; i < distinctYearsList.size(); i++) {
            distinctYears[i] = distinctYearsList.get(i);
        }
        
        return distinctYears;
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching distinct years: " + e.getMessage());
        return new int[0];  // Return an empty array in case of error
    }
}
    private void updateTransactionTable(List<Transaction> transactions) {
        DefaultTableModel model = (DefaultTableModel) tabelViewAllTransactions.getModel();
        model.setRowCount(0);  // Clear the current data

        // Add the filtered transactions
        for (Transaction transaction : transactions) {
            model.addRow(new Object[]{
                transaction.getId(),
                transaction.getAmount(),
                transaction.getDescription(),
                transaction.getCategory(),
                transaction.getTransactionDate(),
                transaction.getUserId()
            });
        }
    }

    // Inside your GUI class
 private void populateYearComboBox(String url, String username, String password,JComboBox cbname) {
    // Database query to get distinct years
    String yearQuery = "SELECT DISTINCT YEAR(transaction_date) AS year FROM transactions";
    
    try (Connection conn = DriverManager.getConnection(url, username, password);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(yearQuery)) {
        cbname.removeAllItems();  // Clear existing items in the combo box
        cbname.addItem("All");  // Add "All" as an option to remove filter
        
        // Add distinct years to the combo box
        while (rs.next()) {
            cbname.addItem(rs.getString("year"));
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private void populateMonthComboBox(String url, String username, String password,JComboBox cbname) {
    // Database query to get distinct months
    String monthQuery = "SELECT DISTINCT MONTH(transaction_date) AS month FROM transactions";
    
    try (Connection conn = DriverManager.getConnection(url, username, password);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(monthQuery)) {
        cbname.removeAllItems();  // Clear existing items in the combo box
        cbname.addItem("All");  // Add "All" as an option to remove filter
        
        // Add distinct months to the combo box
        while (rs.next()) {
            cbname.addItem(rs.getString("month"));
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private void populateDayComboBox(String url, String username, String password,JComboBox cbname) {
    // Database query to get distinct days
    String dayQuery = "SELECT DISTINCT DAY(transaction_date) AS day FROM transactions";
    
    try (Connection conn = DriverManager.getConnection(url, username, password);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(dayQuery)) {
        cbname.removeAllItems();  // Clear existing items in the combo box
        cbname.addItem("All");  // Add "All" as an option to remove filter
        
        // Add distinct days to the combo box
        while (rs.next()) {
            cbname.addItem(rs.getString("day"));
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
public void populateCategoryComboBox(JComboBox<String> categoryComboBox) {
    // Clear any existing items
    categoryComboBox.removeAllItems();
    
    // List of categories to be added to the combo box
    String[] categories = {"All",
        "Income", "Salary", "Bonus", "Freelance Income", "Investments", "Gifts", "Interest",
        "Expenses", "Housing", "Rent/Mortgage", "Property Taxes", "Home Repairs", "Utilities", "Gas/Fuel",
        "Transportation", "Car Maintenance", "Public Transport", "Insurance", "Food", "Groceries", "Dining Out",
        "Snacks", "Coffee", "Healthcare", "Doctor Visits", "Health Insurance", "Medications", "Therapy", "Education",
        "Tuition Fees", "Books/Supplies", "Online Courses", "Entertainment", "Movies", "Concerts", "Hobbies", "Shopping",
        "Clothes", "Electronics", "Gadgets", "Insurance", "Life Insurance", "Health Insurance", "Miscellaneous", "Gifts",
        "Donations", "Savings/Investments", "Retirement Fund", "Emergency Fund", "Stocks/Investments", "Loans and Debts",
        "Loan Repayments", "Credit Card Payments", "Taxes", "Income Tax", "Property Tax", "Subscriptions", "Software Subscriptions",
        "Gym Membership", "Club Membership", "Other", "Miscellaneous Income", "Miscellaneous Expense"
    };

    // Add each category to the combo box
    for (String category : categories) {
        categoryComboBox.addItem(category);
    }
}

    private void clearFieldsAfterDeletion() {
   
    txtRemoveDate.setText("");
    cbRemoveCategory.setSelectedIndex(0); // Reset to default category
    txtRemoveAmount.setText("");
    txtRemoveDescription.setText("");
}


    }




